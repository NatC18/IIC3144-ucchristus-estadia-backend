version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15
    container_name: ucchristus_db
    environment:
      POSTGRES_DB: ucchristus_db
      POSTGRES_USER: ucchristus_user
      POSTGRES_PASSWORD: ucchristus_secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ucchristus_user -d ucchristus_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Django
  web:
    build: .
    container_name: ucchristus_web
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - POSTGRES_DB=ucchristus_db
      - POSTGRES_USER=ucchristus_user
      - POSTGRES_PASSWORD=ucchristus_secure_password_2024
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - AUTH0_DOMAIN=${AUTH0_DOMAIN:-your-auth0-domain.auth0.com}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE:-your-auth0-api-identifier}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID:-your-auth0-client-id}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET:-your-auth0-client-secret}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Redis para caché (opcional pero recomendado)
  redis:
    image: redis:7-alpine
    container_name: ucchristus_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
  static_volume: