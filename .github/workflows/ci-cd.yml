name: 🚀 CI/CD Pipeline - UC Christus Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Variables de base de datos
  DB_NAME: ucchristus_test_db
  DB_USER: test_user
  DB_PASSWORD: test_password
  DB_HOST: localhost
  DB_PORT: 5432
  
  # Variables Django adicionales
  DEBUG: 1
  SECRET_KEY: test-secret-key-for-ci
  AUTH0_DOMAIN: test.auth0.com
  AUTH0_AUDIENCE: test-audience
  AUTH0_CLIENT_ID: test-client-id
  AUTH0_CLIENT_SECRET: test-client-secret

jobs:
  # 🔍 Análisis de código
  code-quality:
    name: 📊 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 bandit safety
        pip install -r requirements.txt
        
    - name: 🔍 Lint with flake8
      run: |
        # Detener si hay errores de sintaxis o nombres no definidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Advertencias generales
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔒 Security scan with bandit
      run: |
        bandit -r . -x ./venv/,./staticfiles/ || true
        
    - name: 🛡️ Check dependencies for vulnerabilities
      run: |
        safety check || true

  # 🧪 Tests y Build
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Run migrations
      run: |
        python manage.py migrate --verbosity=0
        
    - name: 🧪 Run Django tests
      run: |
        python manage.py test --verbosity=2
        
    - name: ✅ Django system check
      run: |
        python manage.py check --deploy
        
    - name: 📊 Collect static files
      run: |
        python manage.py collectstatic --noinput
        
    - name: 🐳 Build Docker image
      run: |
        docker build -t ucchristus-backend:${{ github.sha }} .
        
    - name: 🔍 Test Docker image
      env:
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
      run: |
        docker run --rm ucchristus-backend:${{ github.sha }} python manage.py check

  # 🚀 Preparar deployment (solo en main)
  prepare-deploy:
    name: 🚀 Prepare Deployment
    needs: [code-quality, test-and-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Build production image
      run: |
        docker build -t ucchristus-backend:latest .
        
    - name: 📋 Create deployment summary
      run: |
        echo "## 🎉 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker image built successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Static files collected" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Ready for production deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Deploy to Render/Railway" >> $GITHUB_STEP_SUMMARY
        echo "2. Run migrations in production" >> $GITHUB_STEP_SUMMARY
        echo "3. Verify health checks" >> $GITHUB_STEP_SUMMARY

  # 📊 Reporte final
  report:
    name: 📊 Pipeline Report
    needs: [code-quality, test-and-build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 Generate report
      run: |
        echo "## 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test & Build | ${{ needs.test-and-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.test-and-build.result }}" == "success" ]]; then
          echo "🎉 **All checks passed! Ready for deployment** 🚀" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed. Please review and fix issues.** 🔧" >> $GITHUB_STEP_SUMMARY
        fi